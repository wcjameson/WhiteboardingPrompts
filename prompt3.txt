Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

split
iterate
increment + compressed element
return

function compressString(string) {
  arr = string.split(");
  let var = arr.map(item => item === item)

}

function compressString(string) {
  //arr = string.split;
  let charCount = 0;
  for (let i = 0; i < string.length; i ++){
      if (string[i] === string[i + 1]) {
         charCount ++;
         console.log(string[i] = charCount)
      } else if (string[i] ==={
        return (charCount) + (string[i]);
      }
  }
}

}
for loop
look at value of index0

function compressString(string) {
  //arr = string.split;
  let charCount = 1;
    let output = []
  for (let i = 0; i < string.length; i ++){
      if (string[i] === string[i + 1]) {
         charCount ++;
      } else {
        output.push((charCount) + (string[i]));
        charCount = 1;
      }
  }
    return output.join("")
} 

function compressingStrings(str) {
  let result = ' ';
  let count = 0;
  for (let i = 0; i < str.length; i++) {
    count++ 
    if (str[i] != str[i+1]) { 
      result += count + str[i]; 
      count = 0; 
    }
  }
  return result.replaceAll('1', '');
}